@page "/MiniGolf"
@inherits RazorComponent.Components.Pages.MiniGolfModel
@using RazorComponent.Components.Pages

<h1>MiniGolf scoreboard</h1>

<div class="c-settingsBox">
    <div>
        <TelerikButton OnClick="@(() => { this.ResetGame(); })" Enabled="@(this.Players.Count > 0 || this.Tracks.Count > 0)">reset</TelerikButton>
        <a class="btn btn-light" style="float: right;" href="https://localhost:5001/MiniGolf" role="button">link to current game</a>
    </div>

    <span class="c-rowElement">
        <TelerikButton Class="c-increaseButton" OnClick="@RemovePlayer">-</TelerikButton>
        <TelerikTextBox Label="Player" bind-value="@PlayerNameToAdd" />
        <TelerikButton Class="c-increaseButton" OnClick="@(() => AddPlayer(this.PlayerNameToAdd))">+</TelerikButton>
    </span>

    <span class="c-rowElement">
        <TelerikButton Class="c-increaseButton" OnClick="@RemoveTrack">-</TelerikButton>
        <span class="k-widget k-numerictextbox c-numberInputField">
            <span class="k-numeric-wrap">
                <input class="k-input k-formatted-value" bind="@this.TrackParNumberToAdd" title="Par" disabled />
                <span class="k-select">
                    <span class="k-link k-link-increase" aria-label="Increase value" title="Increase value" onclick="@(() => { if (this.TrackParNumberToAdd < 7) this.TrackParNumberToAdd++; })">
                        <span class="k-icon k-i-arrow-n"></span>
                    </span>
                    <span class="k-link k-link-decrease" aria-label="Decrease value" title="Decrease value" onclick="@(() => { if (this.TrackParNumberToAdd > 1) this.TrackParNumberToAdd--; })">
                        <span class="k-icon k-i-arrow-s"></span>
                    </span>
                </span>
            </span>
        </span>
        <TelerikButton Class="c-increaseButton" OnClick="@(() => AddTrack(this.TrackParNumberToAdd))">+</TelerikButton>
    </span>
</div>

<TelerikGrid Data=@this.Tracks Height="@DataGridHeight">
    <TelerikGridColumns>
        <TelerikGridColumn Title="" Editable="false" Width="28">
            <Template>

                @if (context is Track t)
                {
                    if (t == this.CurrentTrack)
                    {
                        @*<div class="c-currentEditDot" />*@
                        <span class="oi oi-aperture" style="color: darkred;"></span>
                    }
                    else if (t.PlayerHits.Any() && t.PlayerHits.All(a => a.Value != null))
                    {
                        <span class="oi oi-check" style="color: green;" />
                    }
                }
            </Template>
        </TelerikGridColumn>

        <TelerikGridColumn Title="No." Field="@nameof(Track.Number)" Editable="false" Width="55">
            <Template>
                <div class="c-alignCenter">@((context as Track).Number)</div>
            </Template>
        </TelerikGridColumn>

        <TelerikGridColumn Title="@($"Par ({this.Tracks.Where(a => a.PlayerHits.Any(b => b.Value != null)).Sum(a => a.Par)})")" Field="@nameof(Track.Par)" Editable="false" Width="70">
            <Template>
                <div class="c-alignCenter">@((context as Track).Par)</div>
            </Template>
        </TelerikGridColumn>

        @if (this.Players.Count == 0)
        {
            <TelerikGridColumn Title="" Field="" />
        }

        @foreach (var player in this.RankedPlayers)
        {
            <TelerikGridColumn Title="@($"{player.Name} ({this.Tracks.Sum(a => a.PlayerHits[player.Id] ?? 0)})")">
                <Template>
                    <div class="c-alignCenter">
                        @if (context is Track t)
                        {
                            if (t == this.CurrentTrack)
                            {
                                <span class="k-widget k-numerictextbox c-numberInputField">
                                    <span class="k-numeric-wrap c-incellControl">
                                        <input class="k-input k-formatted-value" bind="@t.PlayerHits[player.Id]" title="Par" disabled />
                                        <span class="k-select">
                                            <span class="k-link k-link-increase" aria-label="Increase value" title="Increase value" onclick="@(() => { if (t.PlayerHits[player.Id] == null) t.PlayerHits[player.Id] = t.Par; else if (t.PlayerHits[player.Id] < 7) t.PlayerHits[player.Id]++; })">
                                                <span class="k-icon k-i-arrow-n"></span>
                                            </span>
                                            <span class="k-link k-link-decrease" aria-label="Decrease value" title="Decrease value" onclick="@(() => { if (t.PlayerHits[player.Id] == null) t.PlayerHits[player.Id] = t.Par; else if (t.PlayerHits[player.Id] > 1) t.PlayerHits[player.Id]--; })">
                                                <span class="k-icon k-i-arrow-s"></span>
                                            </span>
                                        </span>
                                    </span>
                                </span>

                                <TelerikButton Class="c-incellControl" OnClick="@(() => { t.PlayerHits[player.Id] = null; })" Enabled="@(t.PlayerHits[player.Id] != null)">
                                    <span class="oi oi-circle-x" style="color: red;" />
                                </TelerikButton>
                            }
                            else
                            {
                                <div class="c-ratingColorize" data-hitDiffToPar="@(t.PlayerHits[player.Id] - t.Par)">
                                    <div class="c-alignCenter">@(t.PlayerHits[player.Id])</div>
                                </div>
                            }
                        }
                    </div>
                </Template>
            </TelerikGridColumn>
        }

        @if (this.LastColumnToggleWorkaroundForDisplayIndex)
        {
            <TelerikGridColumn Title="" Editable="false" Width="110">
                <Template>
                    @if ((context == this.CurrentTrack))
                    {
                        <TelerikButton Icon="save" Primary="true" Class="c-gridEditButton" OnClick="@this.EndEdit">finish</TelerikButton>

                    }
                    else
                    {
                        <TelerikButton Icon="edit" Primary="true" Class="c-gridEditButton" OnClick="@(() => this.StartEdit(context as Track))">start</TelerikButton>
                    }

                </Template>
            </TelerikGridColumn>
        }
    </TelerikGridColumns>
</TelerikGrid>

<style>
    div.c-settingsBox {
        padding-bottom: 20px;
    }

    .c-rowElement {
        white-space: nowrap;
        padding-right: 20px;
    }

    .c-numberInputField {
        width: 70px;
    }

    .c-alignCenter {
        text-align: center;
    }

    /*div.c-currentEditDot {
        width: 20px;
        height: 20px;
        border-radius: 50%;
        border-width: medium;
        border-style: solid;
        border-color: slategray;
        background-color: darkred;
        text-align: center;
    }*/

    .c-gridEditButton {
        width: 85px;
        height: 32px;
    }

    .c-incellControl {
        height: 32px;
    }

    th.k-header {
        font-weight: bold;
        text-align: center;
    }

    .k-grid th, .k-grid td {
        padding: 5px;
    }

    .c-increaseButton {
        width: 30px;
    }

    div.c-ratingColorize[data-hitDiffToPar="-6"] {
        background-color: rgba(0,150,0,0.6);
    }

    div.c-ratingColorize[data-hitDiffToPar="-5"] {
        background-color: rgba(0,150,0,0.5);
    }

    div.c-ratingColorize[data-hitDiffToPar="-4"] {
        background-color: rgba(0,150,0,0.4);
    }

    div.c-ratingColorize[data-hitDiffToPar="-3"] {
        background-color: rgba(0,150,0,0.3);
    }

    div.c-ratingColorize[data-hitDiffToPar="-2"] {
        background-color: rgba(0,150,0,0.2);
    }

    div.c-ratingColorize[data-hitDiffToPar="-1"] {
        background-color: rgba(0,150,0,0.1);
    }

    div.c-ratingColorize[data-hitDiffToPar="0"] {
        background-color: rgba(0,0,0,0.1);
    }

    div.c-ratingColorize[data-hitDiffToPar="1"] {
        background-color: rgba(150,0,0,0.1);
    }

    div.c-ratingColorize[data-hitDiffToPar="2"] {
        background-color: rgba(150,0,0,0.2);
    }

    div.c-ratingColorize[data-hitDiffToPar="3"] {
        background-color: rgba(150,0,0,0.3);
    }

    div.c-ratingColorize[data-hitDiffToPar="4"] {
        background-color: rgba(150,0,0,0.4);
    }

    div.c-ratingColorize[data-hitDiffToPar="5"] {
        background-color: rgba(150,0,0,0.5);
    }

    div.c-ratingColorize[data-hitDiffToPar="6"] {
        background-color: rgba(150,0,0,0.6);
    }
</style>